/*
   FastLED Mapping Demo: https://github.com/jasoncoon/led-mapper
   Copyright (C) 2022 Jason Coon, Evil Genius Labs LLC
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

#include <FastLED.h> // https://github.com/FastLED/FastLED

FASTLED_USING_NAMESPACE

// Based on FastLED "100-lines-of-code" demo reel, showing just a few
// of the kinds of animation patterns you can quickly and easily
// compose using FastLED.
//
// This example also shows one easy way to define multiple
// animations patterns and have them automatically rotate.
//
// -Mark Kriegsman, December 2014

#if defined(FASTLED_VERSION) && (FASTLED_VERSION < 3001000)
#warning "Requires FastLED 3.1 or later; check github for latest code."
#endif

// change these to match your data pin, LED type, and color order
#define DATA_PIN A10
#define LED_TYPE WS2812B
#define COLOR_ORDER GRB

#define BRIGHTNESS 12

// start of data copied from LED Mapper

#define NUM_LEDS 872

byte coordsX[NUM_LEDS] = { 51, 60, 68, 77, 85, 94, 102, 111, 119, 128, 136, 145, 153, 162, 170, 179, 187, 196, 204, 213, 204, 196, 187, 179, 170, 162, 153, 145, 136, 128, 119, 111, 102, 94, 85, 77, 68, 60, 51, 43, 43, 51, 60, 68, 77, 85, 94, 102, 111, 119, 128, 136, 145, 153, 162, 170, 179, 187, 196, 204, 213, 221, 213, 204, 196, 187, 179, 170, 162, 153, 145, 136, 128, 119, 111, 102, 94, 85, 77, 68, 60, 51, 43, 34, 26, 34, 43, 51, 60, 68, 77, 85, 94, 102, 111, 119, 128, 136, 145, 153, 162, 170, 179, 187, 196, 204, 213, 221, 230, 230, 221, 213, 204, 196, 187, 179, 170, 162, 153, 145, 136, 128, 119, 111, 102, 94, 85, 77, 68, 60, 51, 43, 34, 26, 26, 34, 43, 51, 60, 68, 77, 85, 94, 102, 111, 119, 128, 136, 145, 153, 162, 170, 179, 187, 196, 204, 213, 221, 230, 230, 221, 213, 204, 196, 187, 179, 170, 162, 153, 145, 136, 128, 119, 111, 102, 94, 85, 77, 68, 60, 51, 43, 34, 26, 17, 26, 34, 43, 51, 60, 68, 77, 85, 94, 102, 111, 119, 128, 136, 145, 153, 162, 170, 179, 187, 196, 204, 213, 221, 230, 238, 238, 230, 221, 213, 204, 196, 187, 179, 170, 162, 153, 145, 136, 128, 119, 111, 102, 94, 85, 77, 68, 60, 51, 43, 34, 26, 17, 17, 26, 34, 43, 51, 60, 68, 77, 85, 94, 102, 111, 119, 128, 136, 145, 153, 162, 170, 179, 187, 196, 204, 213, 221, 230, 238, 247, 238, 230, 221, 213, 204, 196, 187, 179, 170, 162, 153, 145, 136, 128, 119, 111, 102, 94, 85, 77, 68, 60, 51, 43, 34, 26, 17, 9, 0, 9, 17, 26, 34, 43, 51, 60, 68, 77, 85, 94, 102, 111, 119, 128, 136, 145, 153, 162, 170, 179, 187, 196, 204, 213, 221, 230, 238, 247, 255, 255, 247, 238, 230, 221, 213, 204, 196, 187, 179, 170, 162, 153, 145, 136, 128, 119, 111, 102, 94, 85, 77, 68, 60, 51, 43, 34, 26, 17, 9, 0, 0, 9, 17, 26, 34, 43, 51, 60, 68, 77, 85, 94, 102, 111, 119, 128, 136, 145, 153, 162, 170, 179, 187, 196, 204, 213, 221, 230, 238, 247, 255, 255, 247, 238, 230, 221, 213, 204, 196, 187, 179, 170, 162, 153, 145, 136, 128, 119, 111, 102, 94, 85, 77, 68, 60, 51, 43, 34, 26, 17, 9, 0, 0, 9, 17, 26, 34, 43, 51, 60, 68, 77, 85, 94, 102, 111, 119, 128, 136, 145, 153, 162, 170, 179, 187, 196, 204, 213, 221, 230, 238, 247, 255, 255, 247, 238, 230, 221, 213, 204, 196, 187, 179, 170, 162, 153, 145, 136, 128, 119, 111, 102, 94, 85, 77, 68, 60, 51, 43, 34, 26, 17, 9, 0, 0, 9, 17, 26, 34, 43, 51, 60, 68, 77, 85, 94, 102, 111, 119, 128, 136, 145, 153, 162, 170, 179, 187, 196, 204, 213, 221, 230, 238, 247, 255, 255, 247, 238, 230, 221, 213, 204, 196, 187, 179, 170, 162, 153, 145, 136, 128, 119, 111, 102, 94, 85, 77, 68, 60, 51, 43, 34, 26, 17, 9, 0, 0, 9, 17, 26, 34, 43, 51, 60, 68, 77, 85, 94, 102, 111, 119, 128, 136, 145, 153, 162, 170, 179, 187, 196, 204, 213, 221, 230, 238, 247, 255, 255, 247, 238, 230, 221, 213, 204, 196, 187, 179, 170, 162, 153, 145, 136, 128, 119, 111, 102, 94, 85, 77, 68, 60, 51, 43, 34, 26, 17, 9, 0, 0, 9, 17, 26, 34, 43, 51, 60, 68, 77, 85, 94, 102, 111, 119, 128, 136, 145, 153, 162, 170, 179, 187, 196, 204, 213, 221, 230, 238, 247, 255, 255, 247, 238, 230, 221, 213, 204, 196, 187, 179, 170, 162, 153, 145, 136, 128, 119, 111, 102, 94, 85, 77, 68, 60, 51, 43, 34, 26, 17, 9, 0, 0, 9, 17, 26, 34, 43, 51, 60, 68, 77, 85, 94, 102, 111, 119, 128, 136, 145, 153, 162, 170, 179, 187, 196, 204, 213, 221, 230, 238, 247, 255, 255, 247, 238, 230, 221, 213, 204, 196, 187, 179, 170, 162, 153, 145, 136, 128, 119, 111, 102, 94, 85, 77, 68, 60, 51, 43, 34, 26, 17, 9, 0, 0, 9, 17, 26, 34, 43, 51, 60, 68, 77, 85, 94, 102, 111, 119, 128, 136, 145, 153, 162, 170, 179, 187, 196, 204, 213, 221, 230, 238, 247, 255, 255, 247, 238, 230, 221, 213, 204, 196, 187, 179, 170, 162, 153, 145, 136, 128, 119, 111, 102, 94, 85, 77, 68, 60, 51, 43, 34, 26, 17, 9, 0, 0, 9, 17, 26, 34, 43, 51, 60, 68, 77, 85, 94, 102, 111, 119, 128, 136, 145, 153, 162, 170, 179, 187, 196, 204, 213, 221, 230, 238, 247, 255, 255, 247, 238, 230, 221, 213, 204, 196, 187, 179, 170, 162, 153, 145, 136, 128, 119, 111, 102, 94, 85, 77, 68, 60, 51, 43, 34, 26, 17, 9, 0, 0, 9, 17, 26, 34, 43, 51, 60, 68, 77, 179, 187, 196, 204, 213, 221, 230, 238, 247, 255 };
byte coordsY[NUM_LEDS] = { 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
byte angles[NUM_LEDS] = { 215, 213, 211, 208, 206, 203, 201, 198, 195, 193, 190, 187, 184, 182, 179, 177, 174, 172, 170, 166, 168, 171, 173, 176, 178, 181, 184, 187, 190, 193, 196, 199, 202, 204, 207, 209, 212, 214, 216, 218, 220, 218, 215, 213, 211, 208, 205, 202, 199, 196, 193, 190, 186, 183, 180, 177, 174, 172, 169, 167, 165, 161, 163, 165, 168, 170, 173, 176, 179, 183, 186, 189, 193, 197, 200, 203, 206, 209, 212, 215, 217, 219, 221, 223, 227, 225, 223, 221, 219, 216, 214, 211, 208, 204, 201, 197, 193, 189, 185, 182, 178, 175, 172, 169, 166, 164, 161, 159, 158, 156, 157, 159, 162, 164, 167, 170, 173, 177, 181, 185, 189, 193, 198, 202, 206, 209, 213, 216, 218, 221, 223, 225, 227, 229, 231, 229, 227, 225, 223, 221, 218, 215, 211, 207, 203, 198, 194, 189, 184, 180, 175, 171, 168, 165, 162, 159, 157, 155, 153, 151, 153, 155, 157, 159, 162, 166, 169, 174, 178, 183, 189, 194, 199, 204, 209, 213, 217, 220, 223, 226, 228, 230, 232, 233, 237, 236, 234, 233, 231, 229, 226, 223, 220, 216, 211, 206, 200, 194, 188, 182, 176, 171, 167, 163, 159, 156, 154, 152, 150, 148, 147, 144, 146, 147, 149, 151, 153, 156, 159, 163, 168, 174, 180, 188, 195, 202, 209, 214, 219, 223, 226, 229, 232, 234, 235, 237, 238, 239, 242, 241, 240, 239, 237, 235, 233, 230, 227, 223, 218, 212, 204, 196, 187, 178, 171, 164, 159, 155, 152, 149, 147, 145, 144, 143, 142, 138, 139, 139, 141, 142, 143, 145, 148, 151, 154, 159, 166, 175, 185, 197, 208, 216, 223, 228, 232, 235, 237, 239, 241, 242, 243, 244, 245, 245, 249, 248, 248, 247, 246, 246, 245, 243, 242, 240, 238, 234, 230, 223, 213, 199, 183, 169, 159, 153, 148, 145, 142, 141, 139, 138, 137, 136, 136, 135, 134, 132, 132, 132, 133, 133, 134, 135, 136, 137, 138, 141, 144, 149, 159, 178, 204, 223, 233, 239, 242, 244, 246, 247, 248, 249, 249, 250, 250, 251, 251, 251, 254, 254, 253, 253, 253, 253, 253, 253, 252, 252, 251, 251, 249, 247, 242, 223, 159, 141, 136, 133, 132, 131, 131, 130, 130, 130, 129, 129, 129, 129, 129, 126, 126, 126, 126, 126, 125, 125, 125, 124, 124, 123, 122, 119, 114, 96, 32, 13, 8, 6, 4, 4, 3, 3, 2, 2, 2, 2, 2, 2, 1, 1, 4, 4, 4, 5, 5, 6, 6, 7, 8, 9, 11, 13, 16, 22, 32, 51, 77, 96, 106, 111, 114, 117, 118, 119, 120, 121, 122, 122, 123, 123, 123, 121, 120, 119, 119, 118, 117, 116, 114, 113, 110, 107, 102, 96, 86, 72, 56, 42, 32, 25, 21, 17, 15, 13, 12, 10, 9, 9, 8, 7, 7, 6, 9, 10, 10, 11, 12, 13, 14, 16, 18, 20, 23, 27, 32, 39, 47, 58, 70, 80, 89, 96, 101, 104, 107, 110, 112, 113, 114, 116, 116, 117, 118, 115, 114, 113, 112, 111, 110, 108, 106, 103, 100, 96, 91, 84, 77, 68, 59, 51, 43, 37, 32, 28, 25, 22, 20, 18, 16, 15, 14, 13, 12, 11, 14, 15, 16, 17, 18, 20, 21, 23, 26, 29, 32, 36, 41, 46, 53, 60, 67, 75, 81, 87, 92, 96, 99, 102, 104, 106, 108, 109, 111, 112, 113, 110, 109, 108, 107, 105, 103, 101, 99, 96, 92, 88, 84, 79, 73, 67, 61, 55, 49, 44, 39, 35, 32, 29, 26, 24, 22, 21, 19, 18, 17, 16, 18, 19, 21, 22, 23, 25, 27, 29, 32, 35, 38, 42, 46, 51, 56, 61, 66, 72, 77, 81, 86, 89, 93, 96, 98, 100, 102, 104, 106, 107, 108, 106, 105, 103, 102, 100, 98, 96, 93, 90, 87, 84, 80, 75, 71, 66, 61, 57, 52, 48, 44, 40, 37, 34, 32, 30, 28, 26, 24, 23, 22, 20, 22, 24, 25, 26, 28, 30, 32, 34, 37, 39, 42, 46, 49, 53, 57, 62, 66, 70, 74, 78, 82, 85, 88, 91, 93, 96, 98, 99, 101, 103, 104, 102, 101, 99, 97, 96, 94, 91, 89, 86, 83, 80, 77, 73, 70, 66, 62, 58, 54, 51, 47, 44, 41, 39, 36, 34, 32, 30, 28, 27, 25, 24, 26, 27, 29, 30, 32, 34, 36, 38, 40, 43, 46, 49, 52, 55, 58, 62, 66, 69, 72, 76, 79, 82, 85, 87, 90, 92, 94, 96, 97, 99, 100, 99, 97, 96, 94, 92, 90, 88, 86, 83, 81, 78, 75, 72, 69, 65, 62, 59, 56, 53, 50, 47, 44, 42, 40, 37, 35, 34, 32, 30, 29, 28, 29, 30, 32, 33, 35, 37, 39, 41, 43, 46, 48, 51, 53, 56, 59, 62, 65, 68, 71, 74, 77, 79, 82, 84, 87, 89, 91, 92, 94, 96, 97, 96, 94, 93, 91, 89, 87, 85, 83, 81, 78, 76, 73, 71, 68, 65, 62, 60, 57, 54, 52, 49, 47, 44, 42, 40, 38, 37, 35, 33, 32, 31, 32, 33, 35, 36, 38, 40, 41, 43, 45, 48, 78, 80, 82, 84, 86, 88, 90, 91, 93, 94 };
byte radii[NUM_LEDS] = { 202, 196, 190, 185, 180, 177, 174, 171, 170, 169, 169, 170, 171, 174, 177, 180, 185, 190, 196, 192, 186, 180, 174, 170, 166, 162, 160, 158, 157, 157, 158, 160, 162, 166, 170, 174, 180, 186, 192, 199, 190, 183, 176, 170, 164, 159, 155, 151, 148, 146, 146, 146, 146, 148, 151, 155, 159, 164, 170, 176, 183, 181, 174, 166, 160, 154, 148, 144, 140, 137, 135, 134, 134, 135, 137, 140, 144, 148, 154, 160, 166, 174, 181, 189, 190, 181, 173, 165, 157, 150, 144, 138, 133, 129, 126, 123, 122, 122, 123, 126, 129, 133, 138, 144, 150, 157, 165, 173, 181, 174, 165, 156, 148, 141, 134, 128, 122, 118, 114, 112, 111, 111, 112, 114, 118, 122, 128, 134, 141, 148, 156, 165, 174, 183, 176, 166, 157, 148, 140, 132, 124, 118, 112, 107, 103, 100, 99, 99, 100, 103, 107, 112, 118, 124, 132, 140, 148, 157, 166, 160, 150, 141, 132, 123, 115, 108, 102, 96, 92, 89, 87, 87, 89, 92, 96, 102, 108, 115, 123, 132, 141, 150, 160, 170, 174, 164, 154, 144, 134, 124, 115, 107, 99, 92, 86, 81, 78, 76, 76, 78, 81, 86, 92, 99, 107, 115, 124, 134, 144, 154, 164, 159, 148, 138, 128, 118, 108, 99, 90, 83, 76, 70, 66, 64, 64, 66, 70, 76, 83, 90, 99, 108, 118, 128, 138, 148, 159, 170, 166, 155, 144, 133, 122, 112, 102, 92, 83, 74, 66, 60, 55, 53, 53, 55, 60, 66, 74, 83, 92, 102, 112, 122, 133, 144, 155, 162, 151, 140, 129, 118, 107, 96, 86, 76, 66, 58, 50, 44, 41, 41, 44, 50, 58, 66, 76, 86, 96, 107, 118, 129, 140, 151, 162, 174, 183, 171, 160, 148, 137, 126, 114, 103, 92, 81, 70, 60, 50, 41, 34, 30, 30, 34, 41, 50, 60, 70, 81, 92, 103, 114, 126, 137, 148, 160, 171, 170, 158, 146, 135, 123, 112, 100, 89, 78, 66, 55, 44, 34, 25, 18, 18, 25, 34, 44, 55, 66, 78, 89, 100, 112, 123, 135, 146, 158, 170, 181, 180, 169, 157, 146, 134, 122, 111, 99, 87, 76, 64, 53, 41, 30, 18, 8, 8, 18, 30, 41, 53, 64, 76, 87, 99, 111, 122, 134, 146, 157, 169, 169, 157, 146, 134, 122, 111, 99, 87, 76, 64, 53, 41, 30, 18, 8, 8, 18, 30, 41, 53, 64, 76, 87, 99, 111, 122, 134, 146, 157, 169, 180, 181, 170, 158, 146, 135, 123, 112, 100, 89, 78, 66, 55, 44, 34, 25, 18, 18, 25, 34, 44, 55, 66, 78, 89, 100, 112, 123, 135, 146, 158, 170, 171, 160, 148, 137, 126, 114, 103, 92, 81, 70, 60, 50, 41, 34, 30, 30, 34, 41, 50, 60, 70, 81, 92, 103, 114, 126, 137, 148, 160, 171, 183, 185, 174, 162, 151, 140, 129, 118, 107, 96, 86, 76, 66, 58, 50, 44, 41, 41, 44, 50, 58, 66, 76, 86, 96, 107, 118, 129, 140, 151, 162, 174, 177, 166, 155, 144, 133, 122, 112, 102, 92, 83, 74, 66, 60, 55, 53, 53, 55, 60, 66, 74, 83, 92, 102, 112, 122, 133, 144, 155, 166, 177, 188, 191, 180, 170, 159, 148, 138, 128, 118, 108, 99, 90, 83, 76, 70, 66, 64, 64, 66, 70, 76, 83, 90, 99, 108, 118, 128, 138, 148, 159, 170, 180, 185, 174, 164, 154, 144, 134, 124, 115, 107, 99, 92, 86, 81, 78, 76, 76, 78, 81, 86, 92, 99, 107, 115, 124, 134, 144, 154, 164, 174, 185, 196, 200, 190, 180, 170, 160, 150, 141, 132, 123, 115, 108, 102, 96, 92, 89, 87, 87, 89, 92, 96, 102, 108, 115, 123, 132, 141, 150, 160, 170, 180, 190, 196, 186, 176, 166, 157, 148, 140, 132, 124, 118, 112, 107, 103, 100, 99, 99, 100, 103, 107, 112, 118, 124, 132, 140, 148, 157, 166, 176, 186, 196, 206, 211, 202, 192, 183, 174, 165, 156, 148, 141, 134, 128, 122, 118, 114, 112, 111, 111, 112, 114, 118, 122, 128, 134, 141, 148, 156, 165, 174, 183, 192, 202, 208, 199, 190, 181, 173, 165, 157, 150, 144, 138, 133, 129, 126, 123, 122, 122, 123, 126, 129, 133, 138, 144, 150, 157, 165, 173, 181, 190, 199, 208, 218, 225, 215, 206, 198, 189, 181, 174, 166, 160, 154, 148, 144, 140, 137, 135, 134, 134, 135, 137, 140, 144, 148, 154, 160, 166, 174, 181, 189, 198, 206, 215, 223, 214, 206, 198, 190, 183, 176, 170, 164, 159, 155, 151, 148, 146, 146, 146, 146, 148, 151, 155, 159, 164, 170, 176, 183, 190, 198, 206, 214, 223, 232, 239, 230, 222, 214, 206, 199, 192, 186, 180, 174, 170, 166, 162, 160, 158, 157, 157, 158, 160, 162, 166, 170, 174, 180, 186, 192, 199, 206, 214, 222, 230, 239, 230, 223, 215, 208, 202, 196, 190, 185, 180, 177, 174, 171, 170, 169, 169, 170, 171, 174, 177, 180, 185, 190, 196, 202, 208, 215, 223, 230, 239, 247, 255, 247, 239, 232, 225, 218, 211, 206, 200, 196, 191, 196, 200, 206, 211, 218, 225, 232, 239, 247 };

// end of data copied from LED Mapper

CRGB leds[NUM_LEDS];

#define FRAMES_PER_SECOND 120
#define ARRAY_SIZE(A) (sizeof(A) / sizeof((A)[0]))

uint8_t offset = 0; // rotating "base color" used by many of the patterns
uint8_t speed = 30;

boolean autoplay = true;
uint8_t autoplaySeconds = 2;

void setup()
{
  //  delay(3000); // 3 second delay for recovery

  Serial.begin(9600);

  // tell FastLED about the LED strip configuration
  FastLED.addLeds<LED_TYPE, DATA_PIN, COLOR_ORDER>(leds, NUM_LEDS);
  FastLED.setCorrection(TypicalSMD5050);

  FastLED.setMaxPowerInVoltsAndMilliamps(5, 1000); // 1A

  FastLED.setBrightness(BRIGHTNESS);
}

// List of patterns to cycle through.  Each is defined as a separate function below.
typedef void (*SimplePatternList[])();
SimplePatternList patterns = {
    // 2D map examples:
    clockwisePalette,
    counterClockwisePalette,
    outwardPalette,
    inwardPalette,
    northPalette,
    northEastPalette,
    eastPalette,
    southEastPalette,
    southPalette,
    southWestPalette,
    westPalette,
    northWestPalette,

    // standard FastLED demo reel examples:
    //  rainbow,
    //  rainbowWithGlitter,
    //  confetti,
    //  sinelon,
    //  juggle,
    //  bpm
};

const uint8_t patternCount = ARRAY_SIZE(patterns);

uint8_t currentPatternIndex = 0; // Index number of which pattern is current

CRGBPalette16 IceColors_p = CRGBPalette16(CRGB::Black, CRGB::Blue, CRGB::Aqua, CRGB::White);

const CRGBPalette16 palettes[] = {
    RainbowColors_p,
    RainbowStripeColors_p,
    CloudColors_p,
    LavaColors_p,
    OceanColors_p,
    ForestColors_p,
    PartyColors_p,
    HeatColors_p,
    IceColors_p,
};

const uint8_t paletteCount = ARRAY_SIZE(palettes);

uint8_t currentPaletteIndex = 0;
CRGBPalette16 currentPalette = palettes[currentPaletteIndex];

boolean autoplayPalettes = true;
uint8_t autoplayPaletteSeconds = autoplaySeconds * patternCount;

void loop()
{
  // Call the current pattern function once, updating the 'leds' array
  patterns[currentPatternIndex]();

  offset = beat8(speed);

  // do some periodic updates
  EVERY_N_SECONDS(autoplaySeconds)
  {
    if (autoplay)
    {
      nextPattern(); // change patterns periodically
    }
  }

  EVERY_N_SECONDS(autoplayPaletteSeconds)
  {
    // change palettes periodically
    if (autoplayPalettes)
    {
      nextPalette();
    }
  }

  // send the 'leds' array out to the actual LED strip
  // FastLED.show(); called automatically, internally by FastLED.delay below:

  // insert a delay to keep the framerate modest
  FastLED.delay(1000 / FRAMES_PER_SECOND);
}

void nextPattern()
{
  // add one to the current pattern number, and wrap around at the end
  currentPatternIndex = (currentPatternIndex + 1) % patternCount;
}

void nextPalette()
{
  // add one to the current palette number, and wrap around at the end
  currentPaletteIndex = (currentPaletteIndex + 1) % paletteCount;
  currentPalette = palettes[currentPaletteIndex];
}

// 2D map examples:

void clockwisePalette()
{
  for (uint16_t i = 0; i < NUM_LEDS; i++)
  {
    leds[i] = ColorFromPalette(currentPalette, offset + angles[i]);
  }
}

void counterClockwisePalette()
{
  for (uint16_t i = 0; i < NUM_LEDS; i++)
  {
    leds[i] = ColorFromPalette(currentPalette, offset - angles[i]);
  }
}

void outwardPalette()
{
  for (uint16_t i = 0; i < NUM_LEDS; i++)
  {
    leds[i] = ColorFromPalette(currentPalette, offset - radii[i]);
  }
}

void inwardPalette()
{
  for (uint16_t i = 0; i < NUM_LEDS; i++)
  {
    leds[i] = ColorFromPalette(currentPalette, offset + radii[i]);
  }
}

void northPalette()
{
  for (uint16_t i = 0; i < NUM_LEDS; i++)
  {
    leds[i] = ColorFromPalette(currentPalette, offset - coordsY[i]);
  }
}

void northEastPalette()
{
  for (uint16_t i = 0; i < NUM_LEDS; i++)
  {
    leds[i] = ColorFromPalette(currentPalette, offset - (coordsX[i] + coordsY[i]));
  }
}

void eastPalette()
{
  for (uint16_t i = 0; i < NUM_LEDS; i++)
  {
    leds[i] = ColorFromPalette(currentPalette, offset - coordsX[i]);
  }
}

void southEastPalette()
{
  for (uint16_t i = 0; i < NUM_LEDS; i++)
  {
    leds[i] = ColorFromPalette(currentPalette, offset - coordsX[i] + coordsY[i]);
  }
}

void southPalette()
{
  for (uint16_t i = 0; i < NUM_LEDS; i++)
  {
    leds[i] = ColorFromPalette(currentPalette, offset + coordsY[i]);
  }
}

void southWestPalette()
{
  for (uint16_t i = 0; i < NUM_LEDS; i++)
  {
    leds[i] = ColorFromPalette(currentPalette, offset + coordsX[i] + coordsY[i]);
  }
}

void westPalette()
{
  for (uint16_t i = 0; i < NUM_LEDS; i++)
  {
    leds[i] = ColorFromPalette(currentPalette, offset + coordsX[i]);
  }
}

void northWestPalette()
{
  for (uint16_t i = 0; i < NUM_LEDS; i++)
  {
    leds[i] = ColorFromPalette(currentPalette, offset + coordsX[i] - coordsY[i]);
  }
}

// standard FastLED demo reel examples:

void rainbow()
{
  // FastLED's built-in rainbow generator
  fill_rainbow(leds, NUM_LEDS, offset, 7);
}

void rainbowWithGlitter()
{
  // built-in FastLED rainbow, plus some random sparkly glitter
  rainbow();
  addGlitter(80);
}

void addGlitter(fract8 chanceOfGlitter)
{
  if (random8() < chanceOfGlitter)
  {
    leds[random16(NUM_LEDS)] += CRGB::White;
  }
}

void confetti()
{
  // random colored speckles that blink in and fade smoothly
  fadeToBlackBy(leds, NUM_LEDS, 10);
  int pos = random16(NUM_LEDS);
  leds[pos] += CHSV(offset + random8(64), 200, 255);
}

void sinelon()
{
  // a colored dot sweeping back and forth, with fading trails
  fadeToBlackBy(leds, NUM_LEDS, 20);
  int pos = beatsin16(13, 0, NUM_LEDS - 1);
  leds[pos] += CHSV(offset, 255, 192);
}

void bpm()
{
  // colored stripes pulsing at a defined Beats-Per-Minute (BPM)
  uint8_t BeatsPerMinute = 62;
  CRGBPalette16 palette = PartyColors_p;
  uint8_t beat = beatsin8(BeatsPerMinute, 64, 255);
  for (int i = 0; i < NUM_LEDS; i++)
  { // 9948
    leds[i] = ColorFromPalette(palette, offset + (i * 2), beat - offset + (i * 10));
  }
}

const byte dotCount = 3;
const byte hues = 240 / dotCount;

void juggle()
{
  // eight colored dots, weaving in and out of sync with each other
  fadeToBlackBy(leds, NUM_LEDS, 20);
  for (int i = 0; i < dotCount; i++)
  {
    leds[beatsin16(i + 7, 0, NUM_LEDS - 1)] |= CHSV(i * hues, 200, 255);
  }
}
